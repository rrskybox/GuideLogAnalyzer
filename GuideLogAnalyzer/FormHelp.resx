<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HelpTextBox.Text" xml:space="preserve">
    <value>Guide Log Profiler	 V1.1
Rick McAlister, 12/08/18

Overview: 
Guide Log Profiler graphs TheSkyX guider log file error correction data in both time and frequency, and calculates some overall properties of the logged guiding behavior.  As such, this tool can be used to examine guider effectiveness, contrast the effects of different guider control configurations, compare before and after PEC training, and characterize the behavior of tracking inaccuracies such as caused by mechanical problems.
  
Description:
This application is driven off the selection of a TSX guider log file using the Browse command.  Once a file is selected the basic information fields of the log are parsed and displayed above the three graphs.  These fields should be self-explanatory.

The first graph displays the guider error data in X, Y and total amplitude in arcseconds over the course of the log.  The calibration vectors for the guider (Relay or Direct Guide) are graphed at the right side.  X vector is in blue.  Y vector in green. The tiny “+” indicates the positive direction for each vector.   TSX guider logs do not contain AO calibration vector information at this time.

The next two graphs display the error data translated to its frequency domain.  The middle graph displays the data over it's full range in order to visualize the lowest frequency (displayed as period in minutes) components.  These components are normally associated with mechanical inconsistencies which PEC addresses.  The bottom graph looks only at frequency (displayed as period in seconds) components between 0 and 30 seconds.  These are frequencies normally associated with seeing effects.

Error Statistics, in the Analysis section, displays derived values for RMS, Mean Period and Bracket.  
•	RMS is the mean X, Y and total error over the whole logging period.  
•	Mean Period is the "middle" frequency (displayed as a period, i.e. inverse of frequency) whereby the sum of the frequency magnitudes above this frequency are equal to the sum of the frequency magnitudes below.  This value is an indicator whether the error frequency is biased towards higher or lower frequencies.  
•	Bracket is a calculation of the number of successive errors that bracket the zero position.  That is, if a error is logged in the positive (or negative), then after correction is logged in the negative (or positive), then it is considered to "bracket" zero.  This is a sign that the guider may be over-correcting.

%Correction Statistics has two derived values:

Undershoot is a condition where a correction is made in one direction followed by a second correction in the same direction.  Each undershoot may be a result of either seeing excursions or insufficient correction. If a large percentage of corrections are undershoots, this suggests the latter.

Command Buttons:

Browse:  Locate, open, read and analyze a TheSkyX Autoguide Log file.
Help: What you’re reading here.
About:  Some very brief information about the application.
Print: Prints the window as a single page to the default printer.
Close: The application is terminated.

Requirements: 
Guide Log Analyzer is a Windows Forms executable, written in C#.  Guider Log files used by this app may, but not necessarily must, have been produced by TheSkyX Pro 10.5.0.  The application may also require installation of Microsoft Powerpack 3.0 for charting (can be found at https://www.microsoft.com/en-us/download/details.aspx?id=25169).   The application runs as an uncertified, standalone application under Windows 7, 8 and 10.  

Installation:  
Download the GuideLogAnalyzer_Exe.zip and open. Run the "Setup" application.  Upon completion, an application icon will have been added to the start menu under "TSXToolKit" with the name "Guide Log Analyzer".  This application can be pinned to the Start if desired.

Support:  
This application was written for the public domain and as such is unsupported. The developer wishes you his best and hopes everything works out.  If you find a problem or want to suggest additional features, please contact the author and he'll see what he can do.

Revision History:

1.0	
Initial Release

1.1	
Added calibration vector graph.
Added avoidance code for selecting files that aren’t log files.
Added this help file</value>
  </data>
</root>